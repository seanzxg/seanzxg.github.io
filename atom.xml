<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rainmar.com/"/>
  <updated>2019-11-15T02:17:48.415Z</updated>
  <id>http://rainmar.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>apply bind call</title>
    <link href="http://rainmar.com/ck2zj8hhz000778xi0i0d0vev/"/>
    <id>http://rainmar.com/ck2zj8hhz000778xi0i0d0vev/</id>
    <published>2019-11-15T01:42:38.000Z</published>
    <updated>2019-11-15T02:17:48.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>apply</code> <code>call</code> <code>bind</code> 均为Function的原型方法。</p><p><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects" target="_blank" rel="noopener">类似数组对象</a>）提供的参数。</p><p>语法：<code>func.apply(thisArg, [argsArray])</code></p><p><strong><code>call()</code></strong>方法使用一个指定的this 值和单独给出的一个或多个参数来调用一个函数。</p><p>语法：<code>fun.call(thisArg, arg1, arg2, ...)</code></p><p><strong><code>bind()</code></strong>方法创建一个新的函数，在<code>bind()</code>被调用时，这个新函数的<code>this</code>被bind的第一个参数指定，其余的参数将作为新函数的参数供调用时使用。</p><p>语法：<code>function.bind(thisArg[,arg1[,arg2[, ...]]])</code></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="todo-稍后整理"><a href="#todo-稍后整理" class="headerlink" title="todo 稍后整理"></a>todo 稍后整理</h4><p>参考：</p><p><a href="https://www.jianshu.com/p/7030376af23c" target="_blank" rel="noopener">JS bind()方法、JS原生实现bind()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;code&gt;apply&lt;/code&gt; &lt;code&gt;call&lt;/code&gt; &lt;code&gt;bind&lt;/code&gt; 均为Function的原型方法
      
    
    </summary>
    
    
      <category term="默认" scheme="http://rainmar.com/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
      <category term="默认" scheme="http://rainmar.com/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Vue Bus</title>
    <link href="http://rainmar.com/ck2zj8hhx000578xig12obe83/"/>
    <id>http://rainmar.com/ck2zj8hhx000578xig12obe83/</id>
    <published>2019-11-14T11:21:19.000Z</published>
    <updated>2019-11-15T02:22:36.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-eventbus"><a href="#Vue-eventbus" class="headerlink" title="Vue eventbus"></a>Vue eventbus</h3><p><a href="https://github.com/fffixed/vue-bus" target="_blank" rel="noopener">vue-bus</a> 参考这个插件，花10分钟看一下源码。</p><p>源码讲解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">防御型分号，防止有可能被解析错误</span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> vueBus = &#123;&#125;</span><br><span class="line">  vueBus.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> (version &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="comment">//check Vue version</span></span><br><span class="line">    <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line">    <span class="comment">//定义了另一种赋值类型</span></span><br><span class="line">    <span class="comment">//双向绑定Vue.prototype的$bus属性，监听赋值变化</span></span><br><span class="line">    <span class="comment">////alt way to send an event (this.$bus=['event_name',arg1,arg2]) or this.$bus = 'change'</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$bus'</span>, &#123; <span class="comment">//for "this.$bus"</span></span><br><span class="line">      <span class="keyword">get</span>: function () &#123; <span class="keyword">return</span> bus &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function (evt) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> evt === <span class="string">'string'</span>) evt = [evt]</span><br><span class="line">        bus.$emit.apply(bus, evt)  <span class="comment">//  等价于bus.$emit(...evt)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//混入,以下用法实现监听</span></span><br><span class="line"><span class="comment">//    =========================================</span></span><br><span class="line"><span class="comment">//    export default &#123;</span></span><br><span class="line"><span class="comment">//      name: 'name',</span></span><br><span class="line"><span class="comment">//      mounted() &#123;</span></span><br><span class="line"><span class="comment">//        ...</span></span><br><span class="line"><span class="comment">//      &#125;,</span></span><br><span class="line"><span class="comment">//      $bus: &#123;</span></span><br><span class="line"><span class="comment">//        'evnetname': (value) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             ....</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    ==========================================</span></span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//add option "$bus" instead bus.$on in created hook</span></span><br><span class="line">        <span class="keyword">var</span> $bus = <span class="keyword">this</span>.$options.$bus</span><br><span class="line">        <span class="keyword">this</span>.$busListeners = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> $bus) &#123;</span><br><span class="line">          <span class="keyword">this</span>.$busListeners[name] = $bus[name].bind(<span class="keyword">this</span>) <span class="comment">//rebind and remember each declared listener</span></span><br><span class="line">          bus.$on(name, <span class="keyword">this</span>.$busListeners[name]) <span class="comment">//register a listener for the event</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//unreg listeners</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> <span class="keyword">this</span>.$busListeners) bus.$off(name, <span class="keyword">this</span>.$busListeners[name])</span><br><span class="line">        <span class="keyword">this</span>.$busListeners = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if module</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123; <span class="built_in">module</span>.exports = vueBus; <span class="keyword">return</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123; define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> vueBus &#125;); <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if direct include</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">    <span class="built_in">window</span>.VueBus = vueBus</span><br><span class="line">    <span class="built_in">window</span>.Vue.use(vueBus) <span class="comment">//auto-activation</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="Nuxt-eventbus"><a href="#Nuxt-eventbus" class="headerlink" title="Nuxt eventbus"></a>Nuxt eventbus</h3><h4 id="plugins-bus-js"><a href="#plugins-bus-js" class="headerlink" title="plugins/bus.js"></a>plugins/bus.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> bus = &#123;&#125;</span><br><span class="line">bus.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.prototype.$bus = <span class="keyword">new</span> Vue()</span><br><span class="line">&#125;</span><br><span class="line">Vue.use(bus)</span><br></pre></td></tr></table></figure><h4 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (ctx, inject) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> bus = <span class="keyword">new</span> Vue;</span><br><span class="line">  inject(<span class="string">'bus'</span>, bus);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="nuxt-config-js-配置"><a href="#nuxt-config-js-配置" class="headerlink" title="nuxt.config.js 配置"></a><code>nuxt.config.js</code> 配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">'~/plugins/bus-inject.js'</span>,</span><br><span class="line">    <span class="comment">//or 仅用于客户端</span></span><br><span class="line">    &#123;<span class="attr">src</span>:<span class="string">'~/plugins/bus-inject.js'</span>, <span class="attr">ssr</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="发送事件（组件中）"><a href="#发送事件（组件中）" class="headerlink" title="发送事件（组件中）"></a>发送事件（组件中）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$bus.$emit(<span class="string">'message'</span>, data)</span><br></pre></td></tr></table></figure><h5 id="接收事件"><a href="#接收事件" class="headerlink" title="接收事件"></a>接收事件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$bus.$on(<span class="string">'name-of-event'</span>, (data) &#123;</span><br><span class="line">...deal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="联合方式注入使用"><a href="#联合方式注入使用" class="headerlink" title="联合方式注入使用"></a>联合方式注入使用</h5><h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.$on(<span class="string">'messageSend'</span>, (data) =&gt; &#123;</span><br><span class="line">      ...deal</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  asyncData(&#123;app&#125;) &#123;</span><br><span class="line">    <span class="comment">// app.$bus 同样生效</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="store中使用"><a href="#store中使用" class="headerlink" title="store中使用"></a>store中使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> action = &#123;</span><br><span class="line"><span class="keyword">async</span> sendMessage(&#123;commit&#125;)&#123;</span><br><span class="line">     <span class="keyword">const</span> message = <span class="keyword">await</span> <span class="keyword">this</span>.$axios.post(<span class="string">'/path/to/message'</span>, &#123;...data&#125;)</span><br><span class="line">     commit(<span class="string">'pushMessage'</span>, message);</span><br><span class="line">     <span class="keyword">this</span>.$bus.$emit(<span class="string">'messageSend'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutation = &#123;</span><br><span class="line"><span class="keyword">async</span> sendMessage(&#123;commit&#125;)&#123;</span><br><span class="line">     <span class="keyword">const</span> message = <span class="keyword">await</span> <span class="keyword">this</span>.$axios.post(<span class="string">'/path/to/message'</span>, &#123;...data&#125;)</span><br><span class="line">     commit(<span class="string">'pushMessage'</span>, message);</span><br><span class="line">     <span class="keyword">this</span>.$bus.$emit(<span class="string">'messageSend'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue-eventbus&quot;&gt;&lt;a href=&quot;#Vue-eventbus&quot; class=&quot;headerlink&quot; title=&quot;Vue eventbus&quot;&gt;&lt;/a&gt;Vue eventbus&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ff
      
    
    </summary>
    
    
      <category term="默认" scheme="http://rainmar.com/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
      <category term="默认" scheme="http://rainmar.com/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>前端集锦</title>
    <link href="http://rainmar.com/ck2zj8hi2000978xi0gfqhjf9/"/>
    <id>http://rainmar.com/ck2zj8hi2000978xi0gfqhjf9/</id>
    <published>2019-11-14T08:19:21.000Z</published>
    <updated>2019-11-14T11:19:07.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="layout-布局"><a href="#layout-布局" class="headerlink" title="layout 布局"></a>layout 布局</h4><p><a href="https://github.com/shershen08/vue-masonry" target="_blank" rel="noopener">vue-masonry</a> - 瀑布流，不限制卡片宽高，指令方式</p><h4 id="Event-事件"><a href="#Event-事件" class="headerlink" title="Event 事件"></a>Event 事件</h4><p><a href="https://github.com/scaccogatto/vue-waypoint" target="_blank" rel="noopener">vue-waypoint</a> - 滚动事件监听,可以做滚动异步加载</p><p><a href="https://github.com/simplesmiler/vue-clickaway" target="_blank" rel="noopener">vue-clickaway</a> - 获取本元素以外的点击事件</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="http://www.ayqy.net/doc/css2-1/cover.html" target="_blank" rel="noopener">css2.1中文文档</a></p><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h3&gt;&lt;h4 id=&quot;layout-布局&quot;&gt;&lt;a href=&quot;#layout-布局&quot; class=&quot;headerlink&quot; title=&quot;lay
      
    
    </summary>
    
    
      <category term="前端" scheme="http://rainmar.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="工具集" scheme="http://rainmar.com/tags/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客-搭建</title>
    <link href="http://rainmar.com/ck2zj8hho000078xia1278dso/"/>
    <id>http://rainmar.com/ck2zj8hho000078xia1278dso/</id>
    <published>2019-11-06T06:17:06.000Z</published>
    <updated>2019-11-14T08:24:51.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="为何是Hexo？"><a href="#为何是Hexo？" class="headerlink" title="为何是Hexo？"></a>为何是Hexo？</h4><p>我简单搜了一下博客框架，大概看了几种，作为一个前端，我选择了Hexo。原因如下：</p><ol><li>支持Markdown</li><li>轻量级，不需要后台或者数据库</li><li>一键部署，不需要配置太多的环境，而且跟前端工作相近，打包，生成静态文件等</li><li>插件挺多，虽然还没咋用</li><li>找到了我喜欢的主题</li><li>基于node.js，熟悉感</li></ol><p>More info: <a href="https://hexo.io/zh-cn" target="_blank" rel="noopener">Hexo Doc</a></p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>一台电脑，最好是linux系统或者mac os系统</p><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a>（安装稳定版即可 如果你有意境有了node环境，确保自己的版本不低于8.6即可）</p><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git</a></p><p>tip：如果某些原因需要多版本node，安装<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a>进行版本控制</p><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><h5 id="1-安装Hexo-Cli"><a href="#1-安装Hexo-Cli" class="headerlink" title="1.安装Hexo Cli"></a>1.安装Hexo Cli</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h5 id="2-构建博客项目"><a href="#2-构建博客项目" class="headerlink" title="2.构建博客项目"></a>2.构建博客项目</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p><code>hexo init &lt;folder&gt;</code> 执行过程是把 <a href="https://github.com/hexojs/hexo-starter.git" target="_blank" rel="noopener">hexo-starter</a> 把项目克隆到<code>folder</code>目录下，顺带把<a href="https://github.com/hexojs/hexo-theme-landscape.git" target="_blank" rel="noopener">landscape</a>主题克隆到<code>theme/</code>目录,最后把相关的git的都删掉。给你一个初始化的项目</p><p><code>npm install</code> 安装项目运行相关的依赖包 <code>npm</code>相关的操作请查阅<a href="https://www.npmjs.cn/" target="_blank" rel="noopener">npm文档</a></p><p>tip: 我们在用别人的主题的时候，那么你会把相关主题克隆到<code>theme</code>目录下，导致项目中有其他项目git，则无法提交。以submodule方式提交，因为你修改了__config配置文件，也是无法提交。结果就只有删除掉你克隆的主题<code>.git</code>文件。如果有方案保持其他项目的git管理，又能改动主题的配置文件，同时能提交到自己的仓库，请指教</p><h5 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h5><p>博客网站的配置产考文档 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">hexo 配置</a></p><p>主题引用配置各主题稍有差异，挑一个自己喜欢的主题根据文档来配置。<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a> github搜<code>hexo theme</code>关键词也能搜到</p><p>说一个注意点：</p><p>如果博客是<code>www.xxx.com/blog</code> 那么你的root配置则配置<code>/blog/</code></p><p>如果博客是<code>blog.xxx.com/</code> 那么你的root配置则配置<code>/</code></p><p>tip：<code>root</code>是在你打包构建的时候 生成的public文件中，html引用资源的路径。本地可以配置nginx模拟一下服务器访问，确保生成的资源可访问。</p><h5 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4.常用命令"></a>4.常用命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 构建项目，生成静态文件</span><br><span class="line">hexo generate</span><br><span class="line">// 发布项目到服务器/github</span><br><span class="line">hexo deploy</span><br><span class="line">// 本地运行服务 默认：localhost:4000</span><br><span class="line">hexo server</span><br><span class="line">// 清理构建项目生成的文件</span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>打开package.json中script部分显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class="line">    &quot;server&quot;: &quot;hexo server&quot;,</span><br><span class="line">    &quot;auto&quot;: &quot;npm run clean &amp; npm run generate &amp; npm run deploy&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>npm install</code>装完依赖后，可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm run clean</span><br><span class="line">npm run build</span><br><span class="line">npm run deploy</span><br><span class="line">npm run server</span><br><span class="line">一键清除、构建、部署服务</span><br><span class="line">npm run auto</span><br></pre></td></tr></table></figure><p>以上执行<code>等同于</code>常用命令</p><p>执行到这里，你已经搭成了可以在本地运行，可构建的博客项目了，恭喜</p><p>那么问题来了，如何把你项目部署到服务器或者github pages呢？</p><p>请看下期</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;h4 id=&quot;为何是Hexo？&quot;&gt;&lt;a href=&quot;#为何是Hexo？&quot; class=&quot;headerlink&quot; title=&quot;为何是Hexo？&quot;
      
    
    </summary>
    
    
    
      <category term="博客" scheme="http://rainmar.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客-服务器部署</title>
    <link href="http://rainmar.com/ck2zj8hht000278xic51l6pia/"/>
    <id>http://rainmar.com/ck2zj8hht000278xic51l6pia/</id>
    <published>2019-11-06T06:17:06.000Z</published>
    <updated>2019-11-14T08:30:33.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>通过上一期<a href="http://rainmar.com/ck2qzveds000661xih8wmgl5g/">Hexo博客-搭建</a>,能够构建一个<code>完整</code> <code>可运行</code>博客的项目，配置相关参数，构建生成静态文件。</p><p>本期讲如何把项目构建并部署到服务器上</p><h4 id="流程总览"><a href="#流程总览" class="headerlink" title="流程总览"></a>流程总览</h4><p>服务器环境安装-&gt;创建git用户-&gt;博客git hook-&gt;nginx配置-&gt;hexo deploy</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1.环境安装"></a>1.环境安装</h4><p><code>nginx</code> <code>git</code></p><p>博主的服务器是ubuntu</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt install nginx git -y</span></span><br></pre></td></tr></table></figure><h4 id="2-创建git环境"><a href="#2-创建git环境" class="headerlink" title="2.创建git环境"></a>2.创建git环境</h4><h5 id="①-以root用户登录"><a href="#①-以root用户登录" class="headerlink" title="① 以root用户登录"></a>① 以<code>root</code>用户登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo adduser git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> su git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir .ssh &amp;&amp; chmod 700 .ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><h5 id="②-把-SSH-公钥添加到authorized-keys文件中"><a href="#②-把-SSH-公钥添加到authorized-keys文件中" class="headerlink" title="② 把 SSH 公钥添加到authorized_keys文件中"></a>② 把 SSH 公钥添加到authorized_keys文件中</h5><p>简单说就是把你的<code>ssh</code>添加到服务器的<code>authorized_keys</code>文件中，以后服务器在拉取代码等操作不用登录</p><p>怎么配置ssh？</p><p>例如github，头像&gt;setting&gt;SSH and GPG keys 生成ssh和添加ssh到本机的链接<a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noopener">生成ssh教程</a></p><p>配置完ssh后，在本机的命令行做以下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -al ~/.ssh</span></span><br><span class="line">把`id_rsa.pub`文件发到服务器上</span><br><span class="line"><span class="meta">$</span><span class="bash"> scp root@xxx.xxx.xxx.xxx:/path/to/server .ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure><p>服务器执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /path/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><p>为了安全考虑，需要禁止掉git用户shell登录，参考 <a href="https://git-scm.com/book/zh/v2/服务器上的-Git-配置服务器" target="_blank" rel="noopener">git服务器配置</a></p><h4 id="3-创建git仓库目录-配置git-hooks"><a href="#3-创建git仓库目录-配置git-hooks" class="headerlink" title="3. 创建git仓库目录 配置git hooks"></a>3. 创建git仓库目录 配置<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">git hooks</a></h4><h5 id="①-创建一个名为blog的git裸仓库"><a href="#①-创建一个名为blog的git裸仓库" class="headerlink" title="① 创建一个名为blog的git裸仓库"></a>① 创建一个名为blog的git裸仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /path/to/repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /path/to/repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init --bare blog.git</span></span><br></pre></td></tr></table></figure><h5 id="②-创建-hook-钩子函数"><a href="#②-创建-hook-钩子函数" class="headerlink" title="② 创建 hook 钩子函数"></a>② 创建 hook 钩子函数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h5 id="③-输入了内容如下"><a href="#③-输入了内容如下" class="headerlink" title="③ 输入了内容如下"></a>③ 输入了内容如下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git --work-tree=/path/to/blog/ --git-dir=/path/to/repo/blog.git checkout -f</span></span><br></pre></td></tr></table></figure><h5 id="④-改变blog-git的目录拥有者权限"><a href="#④-改变blog-git的目录拥有者权限" class="headerlink" title="④ 改变blog.git的目录拥有者权限"></a>④ 改变blog.git的目录拥有者权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chown -R git:git blog.git</span></span><br></pre></td></tr></table></figure><h5 id="⑤-创建博客静态文件目录"><a href="#⑤-创建博客静态文件目录" class="headerlink" title="⑤ 创建博客静态文件目录"></a>⑤ 创建博客静态文件目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /path/to/blog/</span><br><span class="line">chown -R git:git /path/to/blog/</span><br><span class="line">chmod -R 755 /path/to/blog/</span><br></pre></td></tr></table></figure><h5 id="⑥-调试一下是否部署成功"><a href="#⑥-调试一下是否部署成功" class="headerlink" title="⑥ 调试一下是否部署成功"></a>⑥ 调试一下是否部署成功</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@服务器ip:/path/to/repo/blog.git</span><br></pre></td></tr></table></figure><p>如果克隆到当前文件中一个空的blog文件，那么你的blog配置就成功了。</p><h4 id="4-服务器nginx配置"><a href="#4-服务器nginx配置" class="headerlink" title="4. 服务器nginx配置"></a>4. 服务器nginx配置</h4><h5 id="①-域名配置"><a href="#①-域名配置" class="headerlink" title="① 域名配置"></a>① 域名配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/site-available/rainmar.com</span><br></pre></td></tr></table></figure><p>rainmar.com是我的域名，并做好了ip和域名映射。 如果你没有域名或者本地调试，默认是default</p><h5 id="②-nginx配置"><a href="#②-nginx配置" class="headerlink" title="② nginx配置"></a>② nginx配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line">        server_name rainmar.com www.rainmar.com;</span><br><span class="line">        index index.html;</span><br><span class="line">        location / &#123;</span><br><span class="line">                alias /data/projects/blog/;</span><br><span class="line">                index  index.html;</span><br><span class="line">                try_files $uri $uri/ /index.html =404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③-重启nginx"><a href="#③-重启nginx" class="headerlink" title="③ 重启nginx"></a>③ 重启nginx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><h4 id="5-hexo-deploy"><a href="#5-hexo-deploy" class="headerlink" title="5.hexo deploy"></a>5.hexo deploy</h4><h5 id="①-安装deploy"><a href="#①-安装deploy" class="headerlink" title="① 安装deploy"></a>① 安装deploy</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><h5 id="②-打开博客项目根目录下-config-yml文件-配置如下"><a href="#②-打开博客项目根目录下-config-yml文件-配置如下" class="headerlink" title="② 打开博客项目根目录下_config.yml文件,配置如下"></a>② 打开博客项目根目录下<code>_config.yml</code>文件,配置如下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@ip或域名:/path/to/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h5 id="③配置一键部署，打开package-json文件"><a href="#③配置一键部署，打开package-json文件" class="headerlink" title="③配置一键部署，打开package.json文件"></a>③配置一键部署，打开package.json文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "build": "hexo generate",</span><br><span class="line">    "clean": "hexo clean",</span><br><span class="line">    "deploy": "hexo deploy",</span><br><span class="line">    "server": "hexo server",</span><br><span class="line">    "c": "npm run clean &amp; npm run build &amp; npm run deploy"</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>npm run c</code>  服务器一键部署（一键执行清理，构建，部署服务器）</p><h3 id="参考文献、文档"><a href="#参考文献、文档" class="headerlink" title="参考文献、文档"></a>参考文献、文档</h3><p><a href="https://blog.csdn.net/sinat_34349564/article/details/52442526" target="_blank" rel="noopener">git仓库和项目源码分离</a></p><p><a href="https://blog.csdn.net/sinat_34349564/article/details/52487860" target="_blank" rel="noopener">git init 和 git init –bare</a></p><p><a href="https://www.jianshu.com/p/70bf58c48010" target="_blank" rel="noopener">HEXO 部署到云服务器详细指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt;通过上一期&lt;a href=&quot;http://rainmar.com/ck2qzveds000661xih8wmgl5g/&quot;&gt;Hexo博客-搭建
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="http://rainmar.com/tags/Hexo/"/>
    
      <category term="服务器" scheme="http://rainmar.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
